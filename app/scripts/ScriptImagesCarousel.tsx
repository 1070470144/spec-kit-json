"use client"

import { useEffect, useState, useRef } from 'react'
import { useSwipe } from '@/src/hooks/useTouchGesture'
import SvgImage from './SvgImage'

type ScriptImage = { 
  id: string; 
  url: string; 
  isCover?: boolean;
  isAutoGenerated?: boolean;
  type?: 'user' | 'auto';
}

export default function ScriptImagesCarousel({ 
  id, 
  previewUrl, 
  hasAutoPreview: passedHasAutoPreview 
}: { 
  id: string; 
  previewUrl?: string; 
  hasAutoPreview?: boolean 
}) {
  const [images, setImages] = useState<ScriptImage[]>([])
  const [index, setIndex] = useState(0)
  const [hasAutoPreview, setHasAutoPreview] = useState(passedHasAutoPreview || false)
  const timerRef = useRef<NodeJS.Timeout | null>(null)
  
  // 如果传入了预览URL，使用单一预览模式 (for list view)
  const isListMode = !!previewUrl
  
  // 触摸滑动支持
  const swipeHandlers = useSwipe({
    onSwipeLeft: () => images.length && setIndex(i => (i + 1) % images.length),
    onSwipeRight: () => images.length && setIndex(i => (i + images.length - 1) % images.length),
  })

  useEffect(() => {
    // 如果是列表模式且有预览URL，直接使用预览图
    if (isListMode && previewUrl) {
      setImages([{
        id: `preview-${id}`,
        url: previewUrl,
        isCover: true,
        isAutoGenerated: passedHasAutoPreview,
        type: passedHasAutoPreview ? 'auto' : 'user'
      }])
      return
    }
    
    // 详情模式：获取完整的图片列表
    let aborted = false
    async function load() {
      try {
        const res = await fetch(`/api/scripts/${id}`, { cache: 'no-store' })
        const j = await res.json()
        const userImages = (j?.data?.images ?? j?.images ?? []) as ScriptImage[]
        
        // 只显示用户上传的图片，不自动生成
        if (userImages.length > 0) {
          // 标记用户图片
          const markedImages = userImages.map(img => ({
            ...img,
            isAutoGenerated: false,
            type: 'user' as const
          }))
          if (!aborted) {
            setImages(markedImages)
            setHasAutoPreview(false)
          }
        } else {
          // 没有图片时，显示空状态
          if (!aborted) {
            setImages([])
            setHasAutoPreview(false)
          }
        }
      } catch {
        // ignore
      }
    }
    load()
    return () => { aborted = true }
  }, [id, isListMode, previewUrl, passedHasAutoPreview])

  useEffect(() => {
    if (!images.length) return
    if (timerRef.current) clearInterval(timerRef.current)
    timerRef.current = setInterval(() => {
      setIndex(prev => (prev + 1) % images.length)
    }, 3000)
    return () => { if (timerRef.current) clearInterval(timerRef.current) }
  }, [images])

  if (!images.length) {
    return (
      <div className="aspect-video w-full bg-slate-100 rounded-t-xl flex items-center justify-center text-sm text-slate-400">
        <div className="text-center">
          <svg className="w-8 h-8 mx-auto mb-2 opacity-50" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
          </svg>
          <div>无图片预览</div>
        </div>
      </div>
    )
  }

  return (
    <div className="relative overflow-hidden rounded-t-xl" {...swipeHandlers}>
      <div className="aspect-video w-full bg-white select-none">
        {images.map((img, i) => (
          <div key={img.id} className={`absolute inset-0 transition-opacity duration-500 ${i === index ? 'opacity-100' : 'opacity-0'}`}>
            <SvgImage
              src={img.url}
              alt="preview"
              className="h-full w-full object-contain"
              draggable={false}
            />
            {/* 自动生成图片标识 */}
            {img.isAutoGenerated && (
              <div className="absolute top-2 right-2 bg-gradient-to-r from-purple-500 to-blue-500 text-white text-xs px-2 py-1 rounded-full shadow-lg opacity-90">
                <svg className="w-3 h-3 inline mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                </svg>
                自动生成
              </div>
            )}
          </div>
        ))}
      </div>
      {images.length > 1 && (
        <div className="absolute bottom-2 sm:bottom-3 left-0 right-0 flex justify-center gap-1">
          {images.map((_, i) => (
            <button
              key={i}
              className="min-w-touch min-h-touch flex items-center justify-center"
              onClick={(e) => { e.preventDefault(); e.stopPropagation(); setIndex(i) }}
              aria-label={`跳转到第 ${i + 1} 张图片`}
            >
              <span className={`h-2 rounded-full transition-all ${i === index ? 'bg-white w-6' : 'bg-white/60 w-2'}`}></span>
            </button>
          ))}
        </div>
      )}
    </div>
  )
}


