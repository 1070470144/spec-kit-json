generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  nickname        String?
  passwordHash    String
  emailVerifiedAt DateTime?
  status          String   @default("active")
  storytellerLevel Int     @default(0)
  roles           Role[]
  scripts         Script[] @relation("AuthorScripts")
  createdScripts  Script[] @relation("CreatedScripts")
  reviews         Review[] @relation("UserReviews")
  comments        Comment[]
  storytellerApplications StorytellerApplication[]
  likes           Like[]
  favorites      Favorite[]
  pushSubscriptions PushSubscription[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastLoginAt     DateTime?
  avatarUrl       String?
}

model Role {
  id              String  @id @default(cuid())
  key             String  @unique
  name            String
  permissionsJson String
  users           User[]
}

model Script {
  id              String        @id @default(cuid())
  title           String
  authorName      String?
  summary         String?
  tagsCsv         String?
  language        String?
  license         String?
  sourceLink      String?
  state           String        @default("pending")
  coverImageId    String?
  createdBy       User?         @relation("CreatedScripts", fields: [createdById], references: [id])
  createdById     String?
  author          User?         @relation("AuthorScripts", fields: [authorId], references: [id])
  authorId        String?
  versions        ScriptJSON[]
  images          ImageAsset[]
  reviews         Review[]
  downloads       DownloadEvent[]
  likeEvents      LikeEvent[]
  likes           Like[]
  favorites       Favorite[]
  comments        Comment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  publishedAt     DateTime?
  systemOwned     Boolean       @default(false)  // 标记为系统接管
  originalOwnerId String?                        // 原始所有者ID
  transferredAt   DateTime?                       // 转移时间
}

model ScriptJSON {
  id           String   @id @default(cuid())
  script       Script   @relation(fields: [scriptId], references: [id])
  scriptId     String
  version      Int
  content      String
  contentHash  String
  schemaValid  Boolean  @default(false)
  schemaErrors String?
  createdAt    DateTime @default(now())
  createdById  String?
}

model ImageAsset {
  id         String   @id @default(cuid())
  script     Script   @relation(fields: [scriptId], references: [id])
  scriptId   String
  path       String
  mime       String
  size       Int
  width      Int?
  height     Int?
  sha256     String
  isCover    Boolean  @default(false)
  sortOrder  Int      @default(0)
  createdAt  DateTime @default(now())
  createdById String?
}

model Review {
  id         String   @id @default(cuid())
  script     Script   @relation(fields: [scriptId], references: [id])
  scriptId   String
  reviewer   User     @relation("UserReviews", fields: [reviewerId], references: [id])
  reviewerId String
  decision   String
  reason     String?
  createdAt  DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  script    Script   @relation(fields: [scriptId], references: [id])
  scriptId  String
  authorId  String?
  author    User?    @relation(fields: [authorId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String?
  action     String
  objectType String
  objectId   String
  result     String
  context    String?
  createdAt  DateTime @default(now())
  ip         String?
  userAgent  String?
}

model Source {
  id            String   @id @default(cuid())
  url           String
  license       String?
  allowed       Boolean  @default(true)
  availability  String   @default("unknown")
  lastCheckedAt DateTime?
}

model DownloadEvent {
  id        String   @id @default(cuid())
  script    Script   @relation(fields: [scriptId], references: [id])
  scriptId  String
  actorId   String?
  createdAt DateTime @default(now())
  ip        String?
  userAgent String?
  referrer  String?
}

model StorytellerApplication {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  imagePath  String
  status     String   @default("pending")
  level      Int      @default(0)
  createdAt  DateTime @default(now())
  reason     String?
}

model LikeEvent {
  id        String   @id @default(cuid())
  script    Script   @relation(fields: [scriptId], references: [id])
  scriptId  String
  actorId   String?
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  script    Script   @relation(fields: [scriptId], references: [id])
  scriptId  String
  createdAt DateTime @default(now())
  @@unique([userId, scriptId])
}

model Favorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  script    Script   @relation(fields: [scriptId], references: [id])
  scriptId  String
  createdAt DateTime @default(now())
  @@unique([userId, scriptId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PendingRegistration {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  nickname     String?
  code         String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PushSubscription {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint    String   @unique
  keys        String   // JSON: {p256dh, auth}
  userAgent   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
}

model NotificationQueue {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'review-result', 'comment-reply', 'system'
  title       String
  body        String
  data        String?  // JSON
  status      String   @default("pending") // pending/sent/failed
  createdAt   DateTime @default(now())
  sentAt      DateTime?
  error       String?
  
  @@index([userId, status])
  @@index([status, createdAt])
}